name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:
    types: [checks_requested]

jobs:
  static-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up environment
        uses: ./.github/actions/setup

      # formatters
      - name: Run ruff format
        run: uv run ruff format --check .
      - name: Run toml-sort
        run: uv run toml-sort --check $(git ls-files '*.toml')
      - name: Run prettier
        run: yarn run prettier --check $(git ls-files '*.yml' '*.yaml')

      # linters
      - name: Run ruff check
        run: uv run ruff check .
      - name: Block @nomerge comments
        run: '! git grep -n "@nomerge" -- ":!.github/workflows/test.yml"'

  type-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up environment
        uses: ./.github/actions/setup

      - name: Restore mypy cache
        uses: actions/cache/restore@v4
        with:
          path: .mypy_cache
          key: mypy-cache-${{ github.ref_name }}-${{ github.sha }}
          restore-keys: |
            mypy-cache-${{ github.event.pull_request.base.ref || github.ref_name }}-

      - name: Run dmypy
        run: uv run dmypy run -- --use-fine-grained-cache .
        continue-on-error: true
      - name: Run mypy
        run: |
          set -o pipefail
          uv run mypy --cache-dir=/dev/null --show-error-end . | while read -r line; do
            if [[ "$line" =~ ^([^:]+):([0-9]+):([0-9]+):([0-9]+):([0-9]+):\ ([a-z]+):\ (.*)$ ]]; then
              file="${BASH_REMATCH[1]}"
              lineno="${BASH_REMATCH[2]}"
              column="${BASH_REMATCH[3]}"
              end_line="${BASH_REMATCH[4]}"
              end_column="${BASH_REMATCH[5]}"
              severity="${BASH_REMATCH[6]}"
              message="${BASH_REMATCH[7]}"

              loglevel="notice"
              [[ "$severity" == "error" ]] && loglevel="error"
              echo "file=$file,line=$lineno,col=$column,endLine=$end_line,endColumn=$end_column::$message"
              echo "::${loglevel} file=$file,line=$lineno,col=$column,endLine=$end_line,endColumn=$end_column::$message"
            fi
            echo "$line"
          done

  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up environment
        uses: ./.github/actions/setup

      - name: Run Django tests
        run: uv run python manage.py test
